{"version":3,"sources":["../src/index.ts","../src/expand.tsx","../src/cvg.tsx"],"sourcesContent":["import CVG from \"./cvg\";\r\nexport default CVG;\r\n\r\nexport * from './expand';","import type { CVG, CVGChild, Unit } from \"./types\";\r\nimport { createElement, useMemo, type ReactNode } from \"react\";\r\n\r\n/**\r\n * Expands CVG objects into SVG DOM nodes. This returns a {@link SVGElement} that\r\n * is ready for use inside the DOM.\r\n * \r\n * @see {@link expandCVGToCode} for non-DOM source code instead\r\n * @param input Input CVG object\r\n * @returns SVG DOM node\r\n */\r\nexport function expandCVG(input: CVG): ReactNode {\r\n    // Start with the root portion\r\n    const rootAttrs: Record<string, string> = {};\r\n\r\n    if (typeof input[0] === 'string') {\r\n        // String is a viewport declaration\r\n        rootAttrs.viewport = input[0];\r\n    } else if (Array.isArray(input[0])) {\r\n        // Array is a viewport declaration as well, but in parts\r\n        if (input[0].length === 2) {\r\n            // Short form\r\n            const [ w, h ] = input[0];\r\n            rootAttrs.viewport = `0 0 ${w} ${h}`;\r\n        } else if (input[0].length === 4) {\r\n            // Long form\r\n            const [ x, y, w, h ] = input[0];\r\n            rootAttrs.viewport = `${x} ${y} ${w} ${h}`;\r\n        } else {\r\n            throw new TypeError('invalid CVG, viewport declaration has incorrect number of elements');\r\n        }\r\n    } else if (typeof input[0] === 'object') {\r\n        // Object is a list of attributes for the root tag\r\n        for (const attr in input[0])\r\n            rootAttrs[attr] = (input[0] as Record<string, Unit>)[attr].toString();\r\n    } else {\r\n        throw new TypeError('invalid CVG, incorrect root declaration');\r\n    }\r\n\r\n    const children: ReactNode[] = [];\r\n\r\n    // Go through the remaining children\r\n    for (let i=1; i < input.length; i++) {\r\n        const child = input[i] as CVGChild;\r\n        if (typeof child === 'string') {\r\n            // String only is a path definition\r\n            children.push(<path d={child} />);\r\n        } else if (Array.isArray(child)) {\r\n            // Arrays are custom element definitions with more \"meat\"\r\n            if (child.length < 2)\r\n                throw new TypeError(`invalid CVG, element ${i-1} is too small`);\r\n            \r\n            const [ tag, attrs, innerText ] = child;\r\n\r\n            children.push(createElement(tag, {\r\n                ...attrs,\r\n            }, (innerText && innerText.length > 0) ? innerText : null))\r\n        } else {\r\n            throw new TypeError(`invalid CVG, element ${i-1} does not have the right type`);\r\n        }\r\n    }\r\n\r\n    // Build the final root\r\n    return createElement('svg', rootAttrs, children);\r\n}\r\n\r\nexport function useExpandedCVG(def: CVG): ReactNode {\r\n    return useMemo(() => expandCVG(def), [def]);\r\n}","import type { CVG as CVGDef } from \"./types\";\r\nimport { useExpandedCVG } from './expand';\r\n\r\n/**\r\n * Properties for a CVG element\r\n */\r\nexport type CVGProps = {\r\n    /**\r\n     * Definition for the CVG, accepting the CVG `object` as `JSON.parse` would\r\n     * produce from reading the file.\r\n     */\r\n    def: CVGDef;\r\n};\r\n\r\n/**\r\n * Component which expands (hydrates) compressed vector graphics definition into\r\n * SVG. It memoizes the results to help speed up future renders.\r\n * \r\n * @component\r\n * @param props.def CVG definition object (required)\r\n */\r\nexport default function CVG(props: CVGProps) {\r\n    const svg = useExpandedCVG(props.def);\r\n    return svg;\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,mBAAuD;AAUhD,SAAS,UAAU,OAAuB;AAE7C,QAAM,YAAoC,CAAC;AAE3C,MAAI,OAAO,MAAM,CAAC,MAAM,UAAU;AAE9B,cAAU,WAAW,MAAM,CAAC;AAAA,EAChC,WAAW,MAAM,QAAQ,MAAM,CAAC,CAAC,GAAG;AAEhC,QAAI,MAAM,CAAC,EAAE,WAAW,GAAG;AAEvB,YAAM,CAAE,GAAG,CAAE,IAAI,MAAM,CAAC;AACxB,gBAAU,WAAW,OAAO,CAAC,IAAI,CAAC;AAAA,IACtC,WAAW,MAAM,CAAC,EAAE,WAAW,GAAG;AAE9B,YAAM,CAAE,GAAG,GAAG,GAAG,CAAE,IAAI,MAAM,CAAC;AAC9B,gBAAU,WAAW,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAAA,IAC5C,OAAO;AACH,YAAM,IAAI,UAAU,oEAAoE;AAAA,IAC5F;AAAA,EACJ,WAAW,OAAO,MAAM,CAAC,MAAM,UAAU;AAErC,eAAW,QAAQ,MAAM,CAAC;AACtB,gBAAU,IAAI,IAAK,MAAM,CAAC,EAA2B,IAAI,EAAE,SAAS;AAAA,EAC5E,OAAO;AACH,UAAM,IAAI,UAAU,yCAAyC;AAAA,EACjE;AAEA,QAAM,WAAwB,CAAC;AAG/B,WAAS,IAAE,GAAG,IAAI,MAAM,QAAQ,KAAK;AACjC,UAAM,QAAQ,MAAM,CAAC;AACrB,QAAI,OAAO,UAAU,UAAU;AAE3B,eAAS,KAAK,oCAAC,UAAK,GAAG,OAAO,CAAE;AAAA,IACpC,WAAW,MAAM,QAAQ,KAAK,GAAG;AAE7B,UAAI,MAAM,SAAS;AACf,cAAM,IAAI,UAAU,wBAAwB,IAAE,CAAC,eAAe;AAElE,YAAM,CAAE,KAAK,OAAO,SAAU,IAAI;AAElC,eAAS,SAAK,4BAAc,KAAK;AAAA,QAC7B,GAAG;AAAA,MACP,GAAI,aAAa,UAAU,SAAS,IAAK,YAAY,IAAI,CAAC;AAAA,IAC9D,OAAO;AACH,YAAM,IAAI,UAAU,wBAAwB,IAAE,CAAC,+BAA+B;AAAA,IAClF;AAAA,EACJ;AAGA,aAAO,4BAAc,OAAO,WAAW,QAAQ;AACnD;AAEO,SAAS,eAAe,KAAqB;AAChD,aAAO,sBAAQ,MAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC;AAC9C;;;AC/Ce,SAAR,IAAqB,OAAiB;AACzC,QAAM,MAAM,eAAe,MAAM,GAAG;AACpC,SAAO;AACX;;;AFvBA,IAAO,cAAQ;","names":[]}