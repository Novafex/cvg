{"version":3,"sources":["../src/entry.ts","../src/compress.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { Command } from 'commander';\r\n\r\nimport compress from './compress';\r\n\r\nconst program = new Command(\"cvg\")\r\n    .version(\"0.1.0\")\r\n    .description(\"Parsing and generating optimized vector graphics based on authored SVG input files\")\r\n    .addCommand(compress);\r\n    \r\nprogram.parse(process.argv); ","import Path from 'path';\r\nimport FS from 'fs/promises';\r\n\r\nimport { Command } from 'commander';\r\nimport Chalk from 'chalk';\r\nimport { globIterate } from 'glob';\r\nimport { compressSVGCodeToCVG } from '@novafex/cvg';\r\n\r\ntype CommandOptions = {\r\n    outDir?: string;\r\n}\r\n\r\nasync function action(this: Command): Promise<void> {\r\n    const opts = this.opts<CommandOptions>();\r\n    for await(const file of globIterate(this.args)) {\r\n        const abs = Path.resolve(process.cwd(), file);\r\n        console.log(Chalk.cyan(`processing input file: ${abs}`));\r\n\r\n        try {\r\n            const rawSVG = await FS.readFile(abs);\r\n            const cvg = await compressSVGCodeToCVG(rawSVG.toString());\r\n            \r\n            const withoutExt = abs.substring(0, abs.lastIndexOf('.'));\r\n            \r\n            let outPath = '.';\r\n            if (opts.outDir)\r\n                outPath = Path.join(opts.outDir, Path.basename(withoutExt + '.svg'));\r\n            else\r\n                outPath = withoutExt + '.svg';\r\n\r\n            await FS.writeFile(outPath, JSON.stringify(cvg), 'utf-8');\r\n            console.log(Chalk.greenBright(`Wrote output CVG to ${outPath}`));\r\n        } catch(err: unknown) {\r\n            console.error(Chalk.red(`failed to compress file ${abs}: `), err);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new Command(\"compress\")\r\n    .description(\"transform authored SVG into compact CVG\")\r\n    .addHelpText('before', 'accepts file path globs to locate files to be consumed as SVG.')\r\n    .arguments(\"[globs...]\")\r\n    .option('-o, --out-dir <PATH>', 'output directory to place CVG files, will default to same as input location')\r\n    // .option('-p, --pipe', 'watches STDIN for SVG input and responds with CVG output', false)\r\n    .action(action)"],"mappings":";;;AAEA,SAAS,WAAAA,gBAAe;;;ACFxB,OAAO,UAAU;AACjB,OAAO,QAAQ;AAEf,SAAS,eAAe;AACxB,OAAO,WAAW;AAClB,SAAS,mBAAmB;AAC5B,SAAS,4BAA4B;AAMrC,eAAe,SAAqC;AAChD,QAAM,OAAO,KAAK,KAAqB;AACvC,mBAAgB,QAAQ,YAAY,KAAK,IAAI,GAAG;AAC5C,UAAM,MAAM,KAAK,QAAQ,QAAQ,IAAI,GAAG,IAAI;AAC5C,YAAQ,IAAI,MAAM,KAAK,0BAA0B,GAAG,EAAE,CAAC;AAEvD,QAAI;AACA,YAAM,SAAS,MAAM,GAAG,SAAS,GAAG;AACpC,YAAM,MAAM,MAAM,qBAAqB,OAAO,SAAS,CAAC;AAExD,YAAM,aAAa,IAAI,UAAU,GAAG,IAAI,YAAY,GAAG,CAAC;AAExD,UAAI,UAAU;AACd,UAAI,KAAK;AACL,kBAAU,KAAK,KAAK,KAAK,QAAQ,KAAK,SAAS,aAAa,MAAM,CAAC;AAAA;AAEnE,kBAAU,aAAa;AAE3B,YAAM,GAAG,UAAU,SAAS,KAAK,UAAU,GAAG,GAAG,OAAO;AACxD,cAAQ,IAAI,MAAM,YAAY,uBAAuB,OAAO,EAAE,CAAC;AAAA,IACnE,SAAQ,KAAc;AAClB,cAAQ,MAAM,MAAM,IAAI,2BAA2B,GAAG,IAAI,GAAG,GAAG;AAAA,IACpE;AAAA,EACJ;AACJ;AAEA,IAAO,mBAAQ,IAAI,QAAQ,UAAU,EAChC,YAAY,yCAAyC,EACrD,YAAY,UAAU,gEAAgE,EACtF,UAAU,YAAY,EACtB,OAAO,wBAAwB,6EAA6E,EAE5G,OAAO,MAAM;;;ADtClB,IAAM,UAAU,IAAIC,SAAQ,KAAK,EAC5B,QAAQ,OAAO,EACf,YAAY,oFAAoF,EAChG,WAAW,gBAAQ;AAExB,QAAQ,MAAM,QAAQ,IAAI;","names":["Command","Command"]}