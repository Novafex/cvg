{"version":3,"sources":["../../src/expand.ts"],"sourcesContent":["import type { CVG, CVGChild, Unit } from './types';\r\n\r\nconst SVGNS = \"http://www.w3.org/2000/svg\";\r\n\r\n/**\r\n * Expands CVG objects into SVG source code. This returns text instead of nodes\r\n * for use in Node or other non-browser environments.\r\n * \r\n * @see {@link expandCVG} for expanding to a DOM node instead.\r\n * @param input Input CVG object\r\n * @param withXMLDecl Whether to include the initial document type XML declaration\r\n * @returns string of SVG code, non-formatted\r\n */\r\nexport function expandCVGToCode(input: CVG, withXMLDecl = false): string {\r\n    if (!input || !Array.isArray(input) || input.length === 0)\r\n        throw new TypeError('invalid CVG argument in expandCVGToCode');\r\n\r\n    const nodes: string[] = [];\r\n\r\n    if (withXMLDecl)\r\n        nodes.push('<?xml version=\"1.0\"?>');\r\n\r\n    // Handle the root declaration, which is first portion\r\n    if (typeof input[0] === 'string') {\r\n        // String is a viewport declaration\r\n        nodes.push(`<svg xmlns=\"${SVGNS}\" viewport=\"${input[0]}\">`);\r\n    } else if (Array.isArray(input[0])) {\r\n        // Array is a viewport declaration as well, but in parts\r\n        if (input[0].length === 2) {\r\n            // Short form\r\n            const [ w, h ] = input[0];\r\n            nodes.push(`<svg xmlns=\"${SVGNS}\" viewport=\"0 0 ${w} ${h}\">`);\r\n        } else if (input[0].length === 4) {\r\n            // Long form\r\n            const [ x, y, w, h ] = input[0];\r\n            nodes.push(`<svg xmlns=\"${SVGNS}\" viewport=\"${x} ${y} ${w} ${h}\">`);\r\n        } else {\r\n            throw new TypeError('invalid CVG, viewport declaration has incorrect number of elements');\r\n        }\r\n    } else if (typeof input[0] === 'object') {\r\n        // Object is a list of attributes for the root tag\r\n        nodes.push(`<svg xmlns=\"${SVGNS}\"`);\r\n        for (const attr in input[0]) {\r\n            nodes.push(` ${attr}=\"${(input[0] as Record<string, Unit>)[attr].toString()}\"`);\r\n        }\r\n        nodes.push('>');\r\n    } else {\r\n        throw new TypeError('invalid CVG, incorrect root declaration');\r\n    }\r\n\r\n    // Go through the remaining children\r\n    for (let i=1; i < input.length; i++) {\r\n        const child = input[i] as CVGChild;\r\n        if (typeof child === 'string') {\r\n            // String only is a path definition\r\n            nodes.push(`<path d=\"${child}\"/>`);\r\n        } else if (Array.isArray(child)) {\r\n            // Arrays are custom element definitions with more \"meat\"\r\n            if (child.length < 2)\r\n                throw new TypeError(`invalid CVG, element ${i-1} is too small`);\r\n            \r\n            const [ tag, attrs, innerText ] = child;\r\n            nodes.push(`<${tag} `);\r\n\r\n            for (const attr in attrs)\r\n                nodes.push(` ${attr}=\"${attrs[attr].toString()}\"`);\r\n            \r\n            if (innerText && innerText.length > 0)\r\n                nodes.push(`>${innerText}</${tag}>`);\r\n            else\r\n                nodes.push('/>');\r\n        } else {\r\n            throw new TypeError(`invalid CVG, element ${i-1} does not have the right type`);\r\n        }\r\n    }\r\n\r\n    nodes.push('</svg>');\r\n    return nodes.join('');\r\n}\r\n\r\n/**\r\n * Expands CVG objects into SVG DOM nodes. This returns a {@link SVGElement} that\r\n * is ready for use inside the DOM.\r\n * \r\n * @see {@link expandCVGToCode} for non-DOM source code instead\r\n * @param input Input CVG object\r\n * @returns SVG DOM node\r\n */\r\nexport function expandCVG(input: CVG): SVGElement {\r\n    if (!document) throw new Error('cannot expand CVG without \"document\" available, ensure you are running in a browser environment');\r\n    const svg = document.createElementNS(SVGNS, \"svg\") as SVGElement;\r\n\r\n    // Handle the root declaration, which is first portion\r\n    if (typeof input[0] === 'string') {\r\n        // String is a viewport declaration\r\n        svg.setAttribute(\"viewport\", input[0]);\r\n    } else if (Array.isArray(input[0])) {\r\n        // Array is a viewport declaration as well, but in parts\r\n        if (input[0].length === 2) {\r\n            // Short form\r\n            const [ w, h ] = input[0];\r\n            svg.setAttribute(\"viewport\", `0 0 ${w} ${h}`);\r\n        } else if (input[0].length === 4) {\r\n            // Long form\r\n            const [ x, y, w, h ] = input[0];\r\n            svg.setAttribute(\"viewport\", `${x} ${y} ${w} ${h}`);\r\n        } else {\r\n            throw new TypeError('invalid CVG, viewport declaration has incorrect number of elements');\r\n        }\r\n    } else if (typeof input[0] === 'object') {\r\n        // Object is a list of attributes for the root tag\r\n        for (const attr in input[0])\r\n            svg.setAttribute(attr, (input[0] as Record<string, Unit>)[attr].toString());\r\n    } else {\r\n        throw new TypeError('invalid CVG, incorrect root declaration');\r\n    }\r\n\r\n    // Go through the remaining children\r\n    for (let i=1; i < input.length; i++) {\r\n        const child = input[i] as CVGChild;\r\n        if (typeof child === 'string') {\r\n            // String only is a path definition\r\n            const el = document.createElementNS(SVGNS, 'path');\r\n            el.setAttribute('d', child);\r\n            svg.appendChild(el);\r\n        } else if (Array.isArray(child)) {\r\n            // Arrays are custom element definitions with more \"meat\"\r\n            if (child.length < 2)\r\n                throw new TypeError(`invalid CVG, element ${i-1} is too small`);\r\n            \r\n            const [ tag, attrs, innerText ] = child;\r\n            const el = document.createElementNS(SVGNS, tag);\r\n\r\n            for (const attr in attrs)\r\n                el.setAttribute(attr, attrs[attr].toString());\r\n            \r\n            if (innerText && innerText.length > 0)\r\n                el.append(innerText);\r\n            svg.appendChild(el);\r\n        } else {\r\n            throw new TypeError(`invalid CVG, element ${i-1} does not have the right type`);\r\n        }\r\n    }\r\n\r\n    return svg;\r\n}"],"mappings":"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","names":[]}