{"version":3,"sources":["../../src/common.ts","../../src/browser.ts"],"sourcesContent":["/**\r\n * CVG - Compressed Vector Graphics\r\n * --------------------------------\r\n * \r\n * Defines the common functionality shared between all platforms\r\n * \r\n * @module CVG\r\n * @author Chris Pikul\r\n * @copyright 2024 Novafex Technologies\r\n * @license MIT\r\n */\r\nimport type { CVG, Unit, CVGChild } from \"./types\";\r\n\r\nexport const SVGNS = \"http://www.w3.org/2000/svg\";\r\n\r\n/**\r\n * Expands CVG objects into SVG source code.\r\n * \r\n * @see {@link expandCVGToSVGElement} for expanding to a DOM node instead.\r\n * @param input Input CVG object\r\n * @param withXMLDecl Whether to include the initial document type XML declaration\r\n * @returns string of SVG code, non-formatted\r\n */\r\nexport function expandCVGToSVGCode(input: CVG, withXMLDecl = false): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n        if (!input || !Array.isArray(input) || input.length === 0)\r\n            return reject(new TypeError('invalid CVG argument in expandCVGToCode'));\r\n\r\n        const nodes: string[] = [];\r\n\r\n        if (withXMLDecl)\r\n            nodes.push('<?xml version=\"1.0\"?>');\r\n\r\n        // Handle the root declaration, which is first portion\r\n        if (typeof input[0] === 'string') {\r\n            // String is a viewport declaration\r\n            nodes.push(`<svg xmlns=\"${SVGNS}\" viewport=\"${input[0]}\">`);\r\n        } else if (Array.isArray(input[0])) {\r\n            // Array is a viewport declaration as well, but in parts\r\n            if (input[0].length === 2) {\r\n                // Short form\r\n                const [ w, h ] = input[0];\r\n                nodes.push(`<svg xmlns=\"${SVGNS}\" viewport=\"0 0 ${w} ${h}\">`);\r\n            } else if (input[0].length === 4) {\r\n                // Long form\r\n                const [ x, y, w, h ] = input[0];\r\n                nodes.push(`<svg xmlns=\"${SVGNS}\" viewport=\"${x} ${y} ${w} ${h}\">`);\r\n            } else {\r\n                return reject(new TypeError('invalid CVG, viewport declaration has incorrect number of elements'));\r\n            }\r\n        } else if (typeof input[0] === 'object') {\r\n            // Object is a list of attributes for the root tag\r\n            nodes.push(`<svg xmlns=\"${SVGNS}\"`);\r\n            for (const attr in input[0]) {\r\n                nodes.push(` ${attr}=\"${(input[0] as Record<string, Unit>)[attr].toString()}\"`);\r\n            }\r\n            nodes.push('>');\r\n        } else {\r\n            return reject(new TypeError('invalid CVG, incorrect root declaration'));\r\n        }\r\n\r\n        // Go through the remaining children\r\n        for (let i=1; i < input.length; i++) {\r\n            const child = input[i] as CVGChild;\r\n            if (typeof child === 'string') {\r\n                // String only is a path definition\r\n                nodes.push(`<path d=\"${child}\"/>`);\r\n            } else if (Array.isArray(child)) {\r\n                // Arrays are custom element definitions with more \"meat\"\r\n                if (child.length < 2)\r\n                    return reject(new TypeError(`invalid CVG, element ${i-1} is too small`));\r\n                \r\n                const [ tag, attrs, innerText ] = child;\r\n                nodes.push(`<${tag} `);\r\n\r\n                for (const attr in attrs)\r\n                    nodes.push(` ${attr}=\"${attrs[attr].toString()}\"`);\r\n                \r\n                if (innerText && innerText.length > 0)\r\n                    nodes.push(`>${innerText}</${tag}>`);\r\n                else\r\n                    nodes.push('/>');\r\n            } else {\r\n                return reject(new TypeError(`invalid CVG, element ${i-1} does not have the right type`));\r\n            }\r\n        }\r\n\r\n        nodes.push('</svg>');\r\n        resolve(nodes.join(''));\r\n    });\r\n}\r\n","\r\n/**\r\n * CVG - Compressed Vector Graphics\r\n * --------------------------------\r\n * \r\n * Defines the browser DOM specific functionality\r\n * \r\n * @module CVG\r\n * @author Chris Pikul\r\n * @copyright 2024 Novafex Technologies\r\n * @license MIT\r\n*/\r\nimport type { CVG, CVGChild, CVGRootAttributeAspect, Unit } from './types';\r\n\r\nconst SVGNS = \"http://www.w3.org/2000/svg\";\r\n\r\n/**\r\n * Compresses a DOM SVG element into CVG definition object\r\n * \r\n * @param svg Incoming {@link SVGElement} DOM node\r\n * @returns Promise resolving to a {@link CVG} definition object\r\n */\r\nexport function compressSVGElement(svg: SVGElement): Promise<CVG> {\r\n    return new Promise<CVG>((resolve, reject) => {\r\n        if (!svg || !(svg instanceof SVGElement) || svg.tagName !== 'svg')\r\n            return reject(new TypeError('compressSVGElement must be provided a SVGElement object'));\r\n\r\n        const ret: CVG = [{}];\r\n\r\n        // Check if viewbox\r\n        if (svg.hasAttribute('viewBox')) {\r\n            const [ x, y, w, h ] = (svg.getAttribute('viewBox') as string).split(' ');\r\n\r\n            // Check if we need the start\r\n            if (x != \"0\" || y != \"0\")\r\n                ret[0] = [parseInt(x), parseInt(y), parseInt(w), parseInt(h)];\r\n            else\r\n                ret[0] = [parseInt(w), parseInt(h)];\r\n\r\n            // See if we need to use a full attribute object\r\n            if (svg.hasAttribute('preserveAspectRatio') || svg.hasAttribute('x') || svg.hasAttribute('y')) {\r\n                ret[0] = {\r\n                    viewport: `${x} ${y} ${w} ${h}`,\r\n                };\r\n\r\n                if (svg.hasAttribute('preserveAspectRatio'))\r\n                    ret[0].preserveAspectRatio = svg.getAttribute('preserveAspectRatio') as CVGRootAttributeAspect['preserveAspectRatio'];\r\n\r\n                if (svg.hasAttribute('x'))\r\n                    ret[0].x = svg.getAttribute('x') as string;\r\n\r\n                if (svg.hasAttribute('y'))\r\n                    ret[0].y = svg.getAttribute('y') as string;\r\n            }\r\n        } else if (svg.hasAttribute('width') || svg.hasAttribute('height')) {\r\n            ret[0] = {\r\n                width: parseInt(svg.getAttribute('width') ?? svg.getAttribute('height') as string),\r\n                height: parseInt(svg.getAttribute('height') ?? svg.getAttribute('width') as string),\r\n            };\r\n\r\n            if (svg.hasAttribute('preserveAspectRatio'))\r\n                ret[0].preserveAspectRatio = svg.getAttribute('preserveAspectRatio') as CVGRootAttributeAspect['preserveAspectRatio'];\r\n\r\n            if (svg.hasAttribute('x'))\r\n                ret[0].x = svg.getAttribute('x') as string;\r\n\r\n            if (svg.hasAttribute('y'))\r\n                ret[0].y = svg.getAttribute('y') as string;\r\n        }\r\n\r\n        for (let i=0; i < svg.childNodes.length; i++) {\r\n            const node = svg.childNodes.item(i);\r\n\r\n            if (node.nodeName === 'path') {\r\n                ret.push((node as Element).getAttribute('d') as string);\r\n            }\r\n        }\r\n\r\n        // All done, return the results\r\n        resolve(ret);\r\n    });\r\n}\r\n\r\n/**\r\n * Expands CVG into a DOM-ready SVG element.\r\n * \r\n * @see {@link expandCVGToSVGCode} to produce string source-code instead\r\n * @param cvg Input {@link CVG} definition\r\n * @returns Promise resolving to a {@link SVGElement} DOM node.\r\n */\r\nexport function expandCVGToSVGElement(cvg: CVG): Promise<SVGElement> {\r\n    return new Promise<SVGElement>((resolve, reject) => {\r\n        if (!cvg || !Array.isArray(cvg) || cvg.length === 0)\r\n            return reject(new TypeError('expandCVGToSVGElement requires valid CVG definition as an input'));\r\n\r\n        const svg = document.createElementNS(SVGNS, \"svg\") as SVGElement;\r\n\r\n        // Handle the root declaration, which is first portion\r\n        if (typeof cvg[0] === 'string') {\r\n            // String is a viewport declaration\r\n            svg.setAttribute(\"viewport\", cvg[0]);\r\n        } else if (Array.isArray(cvg[0])) {\r\n            // Array is a viewport declaration as well, but in parts\r\n            if (cvg[0].length === 2) {\r\n                // Short form\r\n                const [ w, h ] = cvg[0];\r\n                svg.setAttribute(\"viewport\", `0 0 ${w} ${h}`);\r\n            } else if (cvg[0].length === 4) {\r\n                // Long form\r\n                const [ x, y, w, h ] = cvg[0];\r\n                svg.setAttribute(\"viewport\", `${x} ${y} ${w} ${h}`);\r\n            } else {\r\n                throw new TypeError('invalid CVG, viewport declaration has incorrect number of elements');\r\n            }\r\n        } else if (typeof cvg[0] === 'object') {\r\n            // Object is a list of attributes for the root tag\r\n            for (const attr in cvg[0])\r\n                svg.setAttribute(attr, (cvg[0] as Record<string, Unit>)[attr].toString());\r\n        } else {\r\n            throw new TypeError('invalid CVG, incorrect root declaration');\r\n        }\r\n    \r\n        // Go through the remaining children\r\n        for (let i=1; i < cvg.length; i++) {\r\n            const child = cvg[i] as CVGChild;\r\n            if (typeof child === 'string') {\r\n                // String only is a path definition\r\n                const el = document.createElementNS(SVGNS, 'path');\r\n                el.setAttribute('d', child);\r\n                svg.appendChild(el);\r\n            } else if (Array.isArray(child)) {\r\n                // Arrays are custom element definitions with more \"meat\"\r\n                if (child.length < 2)\r\n                    throw new TypeError(`invalid CVG, element ${i-1} is too small`);\r\n                \r\n                const [ tag, attrs, innerText ] = child;\r\n                const el = document.createElementNS(SVGNS, tag);\r\n    \r\n                for (const attr in attrs)\r\n                    el.setAttribute(attr, attrs[attr].toString());\r\n                \r\n                if (innerText && innerText.length > 0)\r\n                    el.append(innerText);\r\n                svg.appendChild(el);\r\n            } else {\r\n                throw new TypeError(`invalid CVG, element ${i-1} does not have the right type`);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport { expandCVGToSVGCode } from './common';\r\n\r\nexport type * from './types';"],"mappings":"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","names":["SVGNS"]}